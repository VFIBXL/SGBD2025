name: .NET 9 CI - 3 stages (with coverage & test reporting)

on:
  pull_request:
    branches: ["main"]

permissions:
  contents: read
  checks: write

jobs:
  restore:
    name: restore
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET 9
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget- 
      - name: Restore
        run: dotnet restore

  build:
    name: build
    runs-on: ubuntu-latest
    needs: restore
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET 9
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget-
      - name: Restore (ensure packages)
        run: dotnet restore
      - name: Build (Release)
        run: dotnet build --configuration Release --no-restore

  test:
    name: test (with coverage & reporting)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET 9
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget-
      - name: Restore
        run: dotnet restore
      - name: Build (Release)
        run: dotnet build --configuration Release --no-restore

      - name: Run tests, produce TRX and collect coverage
        run: |
          dotnet test ./Tests/Tests.csproj \
            --configuration Release \
            --no-build \
            --logger "trx;LogFileName=test_results.trx" \
            --results-directory ./TestResults \
            --collect:"XPlat Code Coverage"

      - name: Publish test report to GitHub Tests tab
        uses: dorny/test-reporter@v1
        with:
          name: Unit Tests
          path: TestResults/*.trx
          reporter: vstest

      - name: Install ReportGenerator global tool
        run: dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.*

      - name: Add dotnet tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Find coverage file and generate HTML report
        shell: bash
        run: |
          COVERAGE_FILE=$(find TestResults -type f -name "coverage.cobertura.xml" -print -quit)
          if [ -z "$COVERAGE_FILE" ]; then
            echo "Coverage file not found. Listing TestResults for debug:" >&2
            find TestResults -type f -ls || true
            exit 1
          fi
          echo "Using coverage file: $COVERAGE_FILE"
          reportgenerator -reports:"$COVERAGE_FILE" -targetdir:CoverageReports -reporttypes:"HtmlSummary;Html"

      - name: Upload test results artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: TestResults

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: CoverageReports

      - name: Upload coverage to Codecov (optional)
        uses: codecov/codecov-action@v4
        with:
          files: TestResults/coverage.cobertura.xml
          fail_ci_if_error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}